package com.example.collectionservice.controllers;

import com.example.collectionservice.models.Collection;
import com.example.collectionservice.models.CollectionVisibilityType;
import com.example.collectionservice.services.CollectionService;
import jakarta.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

@Controller // This means that this class is a Controller
@RequestMapping(path="/api/collection") // This means URL's start with /demo (after Application path)
public class CollectionController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private CollectionService collectionService;

    @PostMapping(path="/collections") // Map ONLY POST Requests
    public @ResponseBody ResponseEntity AddNotification (@Valid @RequestBody Collection requestBody) {
        Collection collection = collectionService.Create(requestBody);
        return ResponseEntity.status(201).body(collection);

    }

    @GetMapping(path="/collections")
    public @ResponseBody ResponseEntity GetAllNotifications() {
        Iterable<Collection> collectionList = collectionService.List();
        return ResponseEntity.status(200).body(collectionList);
    }

    @GetMapping(path="/collections/{id}")
    public @ResponseBody ResponseEntity GetDetails( @PathVariable("id") Integer id) {
        Collection collection = collectionService.Details(id);
        return ResponseEntity.status(200).body(collection);
    }

    @DeleteMapping(path="/collections/{id}")
    public @ResponseBody ResponseEntity Delete(@PathVariable("id") Integer id) {
        collectionService.Delete(id);
        return ResponseEntity.status(204).build();

    }

    @PutMapping("/collections/{id}")
    public @ResponseBody ResponseEntity Update(@PathVariable("id") Integer id, @Valid @RequestBody Collection requestBody) {
        Collection updated = collectionService.Update(id, requestBody);
        return ResponseEntity.status(200).body(updated);

    }

    @GetMapping(path="/collectionTypes")
    public @ResponseBody ResponseEntity GetAllNotificationTypes() {
        Iterable<CollectionVisibilityType> notificationTypeList = collectionService.ListVisibilityTypes();
        return ResponseEntity.status(200).body(notificationTypeList);

    }
}