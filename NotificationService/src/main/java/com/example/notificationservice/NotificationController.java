package com.example.notificationservice;

import com.fasterxml.jackson.databind.JsonNode;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.util.Optional;

@Controller // This means that this class is a Controller
@RequestMapping(path="/api/notification") // This means URL's start with /api/notification (after Application path)
public class NotificationController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private NotificationRepository notificationRepository;
    @Autowired
    private NotificationTypeRepository notificationTypeRepository;

    @PostMapping(path="/add") // Map ONLY POST Requests
    public @ResponseBody String AddNotification (@RequestBody JsonNode notificationPayload) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        Optional<NotificationType> notificationType = notificationTypeRepository.findById(notificationPayload.get("notificationTypeId").asInt());

        if(notificationType.isPresent()) {
            // value is present inside Optional
            Notification notification = new Notification();
            notification.setContent(notificationPayload.get("content").toString());
            notification.setNotificationType(notificationType.get());

            try{
                notificationRepository.save(notification);

            } catch (Exception err) {
                System.out.println("Something went wrong." + err);
            }

            return "Saved";

        } else {
            // value is absent
            System.out.println("Optional is empty");
            return "Failed";
        }
    }

    @GetMapping(path="/getAll")
    public @ResponseBody Iterable<Notification> GetAllNotifications() {
        // This returns a JSON or XML with the users
        return notificationRepository.findAll();
    }
}