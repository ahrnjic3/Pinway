package com.example.userservice.services;


import com.example.userservice.dto.*;
import com.example.userservice.exception.PinwayError;
import com.example.userservice.infrastructure.CollectionService;
import com.example.userservice.models.User;
import com.example.userservice.models.UserCollection;
import com.example.userservice.repositories.UserCollectionRepository;
import com.example.userservice.repositories.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.HashSet;
import java.util.List;
import java.util.Optional;
import java.util.Set;

@Service
public class UserCollectionServiceImpl implements UserCollectionService{

    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @Autowired
    private UserCollectionRepository userCollectionRepository;

    @Autowired
    private CollectionService collectionService;

    @Override
    public User AddCollection(Integer id, UserCollectionCreateDTO userCollectionCreateDTO) {
        Optional<User> userOpt = userRepository.findById(id);
        if (!userOpt.isPresent())
            throw new PinwayError("Not found User with id = " + id);
        // prvjera da li ima post sa IDem ovim datim

        User user = userOpt.get();
        Boolean doesExist = collectionService.DoesExist(userCollectionCreateDTO.getCollectionId());
        if (!doesExist)
            throw new PinwayError("Not found Collection with id = " + userCollectionCreateDTO.getCollectionId());

        UserCollection userCollection = new UserCollection(userCollectionCreateDTO.getCollectionId(), user);

        userCollectionRepository.save(userCollection);

        collectionService.UpdateCollectionVisibility(userCollection.getCollectionId(), "SHARED");

        return  user;

    }

    @Override
    public UserResponseDTO GetAllCollectionsForUser(Integer id) {
        Optional<User> userOpt = userRepository.findById(id);
        if (!userOpt.isPresent())
            throw new PinwayError("Not found User with id = " + id);

        User user = userOpt.get();

        List<CollectionDTO> collectionDTOS = collectionService.GetAllCollectionsForUser(id);
        UserVisibilityTypeDTO userVisibilityTypeDTO = new UserVisibilityTypeDTO(user.getUserVisibilityType().getId(), user.getUserVisibilityType().getType());
        UserDTO userDTO = new UserDTO(user.getId(), user.getGuid(), user.getName(), user.getSurname(), user.getUsername(), user.getEmail(), user.getPassword(), user.getCreatedAt(), userVisibilityTypeDTO, user.getNumOfFollowing(), user.getNumOfFollowers());

        UserResponseDTO userResponseDTO = new UserResponseDTO(userDTO, collectionDTOS);

        return userResponseDTO;
    }
}
