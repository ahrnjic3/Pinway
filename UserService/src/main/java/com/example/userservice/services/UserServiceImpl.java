package com.example.userservice.services;

import com.example.userservice.dto.UserDTO;
import com.example.userservice.exception.PinwayError;
import com.example.userservice.models.Role;
import com.example.userservice.models.User;
import com.example.userservice.models.UserVisibilityType;
import com.example.userservice.repositories.RoleRepository;
import com.example.userservice.repositories.UserRepository;
import com.example.userservice.repositories.UserVisibilityTypeRepository;
import jakarta.ws.rs.NotFoundException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.*;

@Service
public class UserServiceImpl implements UserService{

    private  RoleRepository roleRepository;

    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserVisibilityTypeRepository userVisibilityTypeRepository;
    @Override
    public User Create(User user) {
        User newUser = userRepository.save(user);
        return newUser;
    }
    @Override
    public UUID create(final UserDTO userDTO) {
        final User user = new User();
        mapToEntity(userDTO, user);
        return userRepository.save(user).getId();
    }

    private User mapToEntity(final UserDTO userDTO, final User user) {
        user.setName(userDTO.getName());
        user.setUsername(userDTO.getUsername());
        user.setEmail(userDTO.getEmail());
        user.setPassword(userDTO.getPassword());
        final Role role = userDTO.getRole() == null ? null : roleRepository.findById(userDTO.getRole())
                .orElseThrow(() -> new NotFoundException("role not found"));
        user.setRole(role);
        return user;
    }
    private UserDTO mapToDTO(final User user, final UserDTO userDTO) {
        userDTO.setId(user.getId());
        userDTO.setName(user.getName());
        userDTO.setUsername(user.getUsername());
        userDTO.setEmail(user.getEmail());
        userDTO.setPassword(user.getPassword());
        userDTO.setRole(user.getRole() == null ? null : user.getRole().getId());
        return userDTO;
    }
    public UserDTO getUserByUsername(String username) {
        return mapToDTO(userRepository.getUserByUsername(username),new UserDTO());
    }

    @Override
    public Iterable<User> List() {
        Iterable<User> users = userRepository.findAll();
        return users;
    }

    @Override
    public User Details(UUID id) {
        Optional<User> user = userRepository.findById(id);
        if (user.isPresent()) {
            return user.get();
        }

        throw new PinwayError("Not found User with id = " + id);
    }

    @Override
    public Boolean Delete(UUID id) {
        Optional<User> user = userRepository.findById(id);
        if (user.isPresent()) {
            userRepository.deleteById(id);
            return true;
        }
        throw new PinwayError("Not found User with id = " + id);
    }

    @Override
    public User Update(UUID id, User user) {
        Optional<User> u = userRepository.findById(id);

        if (!u.isPresent())
            throw new PinwayError("Not found User with id = " + id);

        User newUser = u.get();

        newUser.setName(user.getName());
        newUser.setSurname(user.getSurname());
        newUser.setUsername(user.getUsername());
        newUser.setEmail(user.getEmail());
        newUser.setPassword(user.getPassword());
        newUser.setNumOfFollowing(user.getNumOfFollowing());
        newUser.setNumOfFollowers(user.getNumOfFollowers());
        newUser.setCreatedAt(user.getCreatedAt());

        userRepository.save(newUser);
        return newUser;
    }

    @Override
    public Iterable<UserVisibilityType> ListUserVisibilityTypes() {
        Iterable<UserVisibilityType> userVisibilityTypes = userVisibilityTypeRepository.findAll();
        return userVisibilityTypes;
    }


    @Override
    public User AddFollower(UUID userId, UUID followingId) {
        Optional<User> optUser = userRepository.findById(userId);
        if (!optUser.isPresent())
            throw new PinwayError("Not found User with id = " + userId);
        // prvjera da li ima user sa IDem ovim datim

        Optional<User> optFollower = userRepository.findById(followingId);
        if (!optFollower.isPresent())
            throw new PinwayError("Not found User with id = " + followingId);

        User user = optUser.get();
        User follower = optFollower.get();

        user.getFollowing().add(follower);

        userRepository.save(user);
        //collectionRepository.increaseNumOfPosts(collection.getId());
        return  user;
    }

    @Override
    public List<UserDTO> GetAllFollowersForUser(UUID userId) {
        Optional<User> optionalUser = userRepository.findById(userId);
        if (!optionalUser.isPresent())
            throw new PinwayError("Not found User with id = " + userId);

        User user = optionalUser.get();

        List<UUID> ids = new ArrayList<>();
        for (User follower : user.getFollowers()) {
            Optional<User> optFollower = userRepository.findById(follower.getId());
            if (!optFollower.isPresent())
                throw new PinwayError("Not found User with id = " + follower.getId());
            ids.add(follower.getId());
        }

        Iterable<User> users = userRepository.findAllById(ids);
        ArrayList<UserDTO> userDTOS = new ArrayList<UserDTO>();

        for (User u: users) {
            UserDTO userDTO = new UserDTO(u.getId(), u.getName(), u.getSurname(), u.getUsername(), u.getEmail(), u.getPassword(), u.getCreatedAt());
            userDTOS.add(userDTO);
        }

        return userDTOS;
    }
}


