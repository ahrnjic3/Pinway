package com.example.userservice.services;

import com.example.userservice.exception.PinwayError;
import com.example.userservice.models.User;
import com.example.userservice.models.UserVisibilityType;
import com.example.userservice.repositories.UserRepository;
import com.example.userservice.repositories.UserVisibilityTypeRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.Optional;

@Service
public class UserServiceImpl implements UserService{
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserVisibilityTypeRepository userVisibilityTypeRepository;
    @Override
    public User Create(User user) {
        User newUser = userRepository.save(user);
        return newUser;
    }

    @Override
    public Iterable<User> List() {
        Iterable<User> users = userRepository.findAll();
        return users;
    }

    @Override
    public User Details(Integer id) {
        Optional<User> user = userRepository.findById(id);
        if (user.isPresent()) {
            return user.get();
        }

        throw new PinwayError("Not found User with id = " + id);
    }

    @Override
    public Boolean Delete(Integer id) {
        Optional<User> user = userRepository.findById(id);
        if (user.isPresent()) {
            userRepository.deleteById(id);
            return true;
        }
        throw new PinwayError("Not found User with id = " + id);
    }

    @Override
    public User Update(Integer id, User user) {
        Optional<User> u = userRepository.findById(id);

        if (!u.isPresent())
            throw new PinwayError("Not found User with id = " + id);

        User newUser = u.get();

        newUser.setName(user.getName());
        newUser.setSurname(user.getSurname());
        newUser.setUsername(user.getUsername());
        newUser.setEmail(user.getEmail());
        newUser.setPassword(user.getPassword());
        newUser.setNumOfFollowing(user.getNumOfFollowing());
        newUser.setNumOfFollowers(user.getNumOfFollowers());
        newUser.setCreatedAt(user.getCreatedAt());

        userRepository.save(newUser);
        return newUser;
    }

    @Override
    public Iterable<UserVisibilityType> ListUserVisibilityTypes() {
        Iterable<UserVisibilityType> userVisibilityTypes = userVisibilityTypeRepository.findAll();
        return userVisibilityTypes;
    }
}


